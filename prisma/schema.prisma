generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TicketType {
  bug
  data_issue
  account
  model_help
  feature_request
  other
}

enum TicketStatus {
  open
  in_progress
  resolved
  closed
}

enum TicketPriority {
  low
  medium
  high
  urgent
}

model companies {
  company_id       Int      @id @default(autoincrement())
  company_name     String?
  created_at       DateTime?
  updated_at       DateTime?
  industry         String?
  company_size     String?
  website          String?
  logo_url         String?

  users               users[]
  product_instances   product_instances[]
  support_tickets     support_tickets[]
  company_users       company_users[]
  subscriptions       subscriptions[]
  account_credits     account_credits[]
  custom_model_orders custom_model_orders[]
}

model users {
  user_id                         Int       @id @default(autoincrement())
  full_name                       String?
  email                           String    @unique
  password_hash                   String?
  stripe_customer_id              String?   @unique @db.VarChar(255)
  default_company_id              Int?
  profile_picture_url             String?
  job_title                       String?
  phone                           String?
  timezone                        String?
  last_login                      DateTime?
  onboarding_completed            Boolean?
  marketing_opt_in                Boolean?
  terms_accepted                  Boolean   @default(false)
  terms_accepted_date             DateTime?
  email_verification_token        String?   @db.VarChar(255)
  email_verification_token_expiry DateTime?
  pending_new_email               String?
  email_change_attempted_at       DateTime?
  email_change_token              String?   @db.VarChar(255)
  email_change_token_expiry       DateTime?
  email_updated_at                DateTime?
  email_verified                  Boolean   @default(false)
  reset_password_token            String?   @db.VarChar(255)
  reset_password_token_expiry     DateTime?
  created_at                      DateTime?
  updated_at                      DateTime?

  companies                  companies?             @relation(fields: [default_company_id], references: [company_id])
  product_instances_created  product_instances[]    @relation("product_instances_created_by")
  product_instances_modified product_instances[]    @relation("product_instances_last_modified_by")
  product_instances_deleted  product_instances[]    @relation("product_instances_deleted_by")
  product_instances_locked   product_instances[]    @relation("product_instances_locked_by")
  product_versions           product_versions[]
  user_favorites             user_favorites[]
  user_social_accounts       user_social_accounts[]
  recent_accesses            recent_accesses[]
  support_tickets            support_tickets[]
  company_users              company_users[]
  custom_model_orders        custom_model_orders[]
  shared_products_shared     shared_products[] @relation("SharedBy")
  removedUsers               company_users[] @relation("RemovedBy")
}

model product_types {
  product_type_id     Int      @id @default(autoincrement())
  name                String?
  description         String?
  pricing_model       String?
  is_active           Boolean  @default(true)
  requires_subscription Boolean?
  form_config         Json?
  output_types        Json?
  created_at          DateTime?
  updated_at          DateTime?

  product_instances   product_instances[]
}

model product_instances {
  instance_id           String       @id @default(uuid())
  product_type_id       Int?
  company_id            Int?
  created_by            Int?
  last_modified_by      Int?
  title                 String?
  description           String?
  unique_slug           String?   @unique
  public_access_level   String?
  current_version_id    Int?
  is_template           Boolean?
  template_id           String?
  status                String?
  created_at            DateTime?
  updated_at            DateTime?
  completion_percentage Int      @default(0)
  last_autosave_at      DateTime?
  sections_completed    Json?
  deleted_at            DateTime?
  deleted_by            Int?
  is_locked             Boolean   @default(false)
  locked_at             DateTime?
  locked_by             Int?
  locked_reason         String?
  is_clone              Boolean   @default(false)
  cloned_from           String?
  clone_count           Int       @default(0)
  is_archived           Boolean   @default(false)
  archived_at           DateTime?
  archived_deleted_at   DateTime?
  was_from_plan         String?
  archived_reason       String?

  company               companies?         @relation(fields: [company_id], references: [company_id])
  creator               users?             @relation("product_instances_created_by", fields: [created_by], references: [user_id])
  modifier              users?             @relation("product_instances_last_modified_by", fields: [last_modified_by], references: [user_id])
  deleted_by_user       users?             @relation("product_instances_deleted_by", fields: [deleted_by], references: [user_id])
  locked_by_user        users?             @relation("product_instances_locked_by", fields: [locked_by], references: [user_id])
  cloned_from_instance  product_instances? @relation("ClonedFrom", fields: [cloned_from], references: [instance_id])
  product_type          product_types?     @relation(fields: [product_type_id], references: [product_type_id])
  template              product_instances? @relation("Template", fields: [template_id], references: [instance_id])
  instances             product_instances[] @relation("Template")
  clones                product_instances[] @relation("ClonedFrom")
  product_versions      product_versions[]
  product_form_data     product_form_data[]
  user_favorites        user_favorites[]
  recent_accesses       recent_accesses[]
  shared_products       shared_products[]

  @@index([is_locked], name: "idx_product_instances_is_locked")
  @@index([is_archived], name: "idx_product_instances_is_archived")
  @@index([archived_deleted_at], name: "idx_product_instances_archive_delete_at")
  @@index([company_id, deleted_at], name: "idx_product_instances_company_deleted")
  @@index([cloned_from], name: "idx_product_instances_cloned_from")
}

model product_versions {
  version_id         Int      @id @default(autoincrement())
  instance_id        String?
  version_number     Int?
  created_by         Int?
  changes_description String?
  change_type        String?
  created_at         DateTime?

  product_instance   product_instances? @relation(fields: [instance_id], references: [instance_id])
  creator            users?             @relation(fields: [created_by], references: [user_id])
  product_form_data  product_form_data[]
}

model product_form_data {
  form_data_id   Int      @id @default(autoincrement())
  instance_id    String?
  section_name   String?
  version_id     Int?
  form_data      Json?
  metadata       Json?
  created_at     DateTime?
  updated_at     DateTime?

  product_instance product_instances?   @relation(fields: [instance_id], references: [instance_id])
  product_version  product_versions?    @relation(fields: [version_id], references: [version_id])
  @@unique([instance_id, section_name])
}

model user_favorites {
  favorite_id Int      @id @default(autoincrement())
  user_id     Int
  instance_id String
  created_at  DateTime @default(now())

  user         users             @relation(fields: [user_id], references: [user_id])
  instance     product_instances @relation(fields: [instance_id], references: [instance_id])

  @@unique([user_id, instance_id], name: "user_favorites_user_id_instance_id_key")
  @@index([user_id], name: "idx_user_favorites_user")
}


model recent_accesses {
  access_id    Int       @id @default(autoincrement())
  user_id      Int
  instance_id  String
  accessed_at  DateTime  @default(now())

  // Relations
  user         users     @relation(fields: [user_id], references: [user_id])
  product      product_instances @relation(fields: [instance_id], references: [instance_id])

  @@unique([user_id, instance_id])
  @@index([accessed_at(sort: Desc)])
  @@index([user_id])
}

model user_social_accounts {
  id                Int      @id @default(autoincrement())
  user_id           Int
  provider          String   @db.VarChar(50)
  provider_user_id  String   @db.VarChar(255)
  email             String?  @db.VarChar(255)
  profile_picture_url String?
  id_token          String?
  last_login_at     DateTime?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())
  user              users    @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  @@unique([user_id, provider, provider_user_id])
  @@index([user_id], name: "idx_user_social_accounts_user_id")
  @@map("user_social_accounts")
}

model support_tickets {
  id             Int           @id @default(autoincrement())
  ticket_number  Int           @unique @default(dbgenerated("nextval('support_tickets_ticket_number_seq'::regclass)"))
  user_id        Int  
  company_id     Int
  ticket_type    TicketType
  subject        String        @db.VarChar(255)
  description    String
  status         TicketStatus  @default(open)
  priority       TicketPriority @default(medium)
  page_url       String?
  browser_info   Json?
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  resolved_at    DateTime?
  platform       String        @default("PH3") @db.VarChar(10)

  user           users         @relation(fields: [user_id], references: [user_id])
  company        companies     @relation(fields: [company_id], references: [company_id])

  @@index([user_id], name: "idx_support_tickets_user_id")
  @@index([company_id], name: "idx_support_tickets_company_id")
  @@index([status], name: "idx_support_tickets_status")
  @@index([created_at(sort: Desc)], name: "idx_support_tickets_created_at")
  @@index([ticket_number], name: "idx_support_tickets_ticket_number")
}

model company_users {
  company_id              Int
  user_id                 Int
  role                    String?
  seat_status             String?
  removed_from_company_at DateTime?
  removed_from_company_by Int?
  created_at              DateTime  @default(now()) @db.Timestamp(6)
  updated_at              DateTime  @updatedAt @db.Timestamp(6)
  custom_permissions      Json?

  company   companies @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction)
  user      users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  removedBy users?    @relation("RemovedBy", fields: [removed_from_company_by], references: [user_id], onDelete: SetNull, onUpdate: Cascade)

  @@id([company_id, user_id])
  @@map("company_users")
}

model demo_requests {
  id                 Int       @id @default(autoincrement())
  request_number     Int       @unique @default(dbgenerated("nextval('demo_requests_request_number_seq'::regclass)"))
  user_type          String    @db.VarChar(50)
  is_qualified       Boolean   @default(false)
  full_name          String    @db.VarChar(255)
  email              String    @db.VarChar(255)
  company_name       String?   @db.VarChar(255)
  phone              String?   @db.VarChar(50)
  additional_info    String?   @db.Text
  form_data          Json      @db.JsonB
  calendly_shown_at  DateTime? @db.Timestamptz
  calendly_scheduled Boolean   @default(false)
  booking_token      String    @unique @default(uuid()) @db.Uuid
  token_expires_at   DateTime  @default(dbgenerated("(now() + '7 days'::interval)")) @db.Timestamptz
  follow_up_sent     Boolean   @default(false)
  follow_up_sent_at  DateTime? @db.Timestamptz
  source_url         String?   @db.Text
  utm_source         String?   @db.VarChar(100)
  utm_medium         String?   @db.VarChar(100)
  utm_campaign       String?   @db.VarChar(100)
  browser_info       Json?     @db.JsonB
  created_at         DateTime  @default(now()) @db.Timestamptz
  updated_at         DateTime  @default(now()) @db.Timestamptz

  @@index([email], name: "idx_demo_requests_email")
  @@index([is_qualified], name: "idx_demo_requests_qualified")
  @@index([calendly_shown_at, calendly_scheduled, follow_up_sent], name: "idx_demo_requests_follow_up")
}

model stripe_webhook_events {
  event_id        Int       @id @default(autoincrement())
  stripe_event_id String    @unique
  type            String    @db.VarChar(100)
  data            Json?     @db.JsonB
  processed       Boolean   @default(false)
  error_message   String?   @db.Text
  created_at      DateTime  @default(now())
  processed_at    DateTime?

  @@index([type], name: "idx_webhook_events_type")
  @@index([processed], name: "idx_webhook_events_processed")
  @@index([created_at], name: "idx_webhook_events_created")
}

model subscriptions {
  subscription_id         Int       @id @default(autoincrement())
  company_id              Int?      @unique
  plan_name               String?   @db.VarChar
  seats_used              Int?
  models_used             Int?
  status                  String?   @db.VarChar
  start_date              DateTime?
  renewal_date            DateTime?
  trial_end_date          DateTime?
  first_subscription_date DateTime?
  stripe_customer_id      String?   @db.VarChar
  stripe_subscription_id  String?   @db.VarChar
  stripe_price_id         String?   @db.VarChar
  billing_cycle           String?   @db.VarChar
  cancel_at_period_end    Boolean   @default(false)
  is_manual_trial         Boolean   @default(false)
  last_payment_error      Json?     @db.JsonB
  billing_email           String?   @db.VarChar
  billing_address         Json?     @db.JsonB
  payment_method_id       String?   @db.VarChar
  created_at              DateTime?
  updated_at              DateTime?

  company companies? @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction)
}

model custom_model_orders {
  order_id                   Int       @id @default(autoincrement())
  company_id                 Int?
  user_id                    Int?
  stripe_payment_intent_id   String    @unique @db.VarChar(255)
  stripe_checkout_session_id String?   @unique @db.VarChar(255)
  product_type               String    @db.VarChar(50)
  amount                     Decimal   @db.Decimal
  currency                   String    @default("gbp") @db.VarChar(3)
  status                     String    @default("pending") @db.VarChar(50)
  customer_email             String?   @db.VarChar(255)
  notes                      String?   @db.Text
  metadata                   Json?     @db.JsonB
  created_at                 DateTime  @default(now())
  delivered_at               DateTime?
  updated_at                 DateTime  @default(now())

  company companies? @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction)
  user    users?     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([company_id], name: "idx_custom_orders_company")
  @@index([user_id], name: "idx_custom_orders_user")
  @@index([status], name: "idx_custom_orders_status")
  @@index([product_type], name: "idx_custom_orders_product_type")
}

model account_credits {
  credit_id                Int       @id @default(autoincrement())
  company_id               Int
  amount                   Float
  description              String?   @db.VarChar(255)
  invoice_id                String    @db.VarChar(255)
  created_at               DateTime?
  updated_at               DateTime?

  company companies? @relation(fields: [company_id], references: [company_id], onDelete: NoAction, onUpdate: NoAction)
}

model subscription_limits {
  plan_name              String   @id @db.VarChar(255)
  max_models             Int?
  included_seats         Int      @default(1)
  has_export             Boolean  @default(false)
  has_advanced_analytics Boolean  @default(false)
  has_api_access         Boolean  @default(false)
  allows_view_sharing    Boolean  @default(true)
  created_at             DateTime @default(now())
  updated_at             DateTime @updatedAt
}

model shared_products {
  share_id          Int       @id @default(autoincrement())
  instance_id       String?
  shared_by         Int?
  shared_with_email String?
  permission        String?
  access_token      String?
  status            String    @default("pending")
  expiration        DateTime?
  accepted_at       DateTime?
  declined_at       DateTime?
  deleted_at        DateTime?
  prevent_download  Boolean?
  disable_comments  Boolean?
  last_accessed     DateTime?
  visits_count      Int?      @default(0)
  created_at        DateTime?
  updated_at        DateTime?

  product_instance product_instances? @relation(fields: [instance_id], references: [instance_id])
  sharedBy         users?             @relation("SharedBy", fields: [shared_by], references: [user_id])

  @@map("shared_products")
  @@unique([instance_id, shared_with_email])
}
